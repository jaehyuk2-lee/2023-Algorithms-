#include <iostream>
using namespace std;

const int coverType [4][3][2] = {
  {{0, 0}, {1, 0}, {0, 1}},
  {{0, 0}, {0, 1}, {1, 1}},
  {{0, 0}, {1, 0}, {1, 1}},
  {{0, 0}, {1, 0}, {1,-1}}
};

int H, W;

bool set(int** board, int y, int x, int type, int delta) {
    bool ok = true;
    for(int i = 0; i < 3; i++) {
        const int ny = y + coverType[type][i][0];
        const int nx = x + coverType[type][i][1];
        
        if(ny < 0 || ny >= H || nx < 0 || nx >= W) ok = false; //범위내에 없을 때
        else if((board[ny][nx] += delta) > 1) ok = false; // 칸을 계산하고 덮은 곳을 또 덮은 것이면 false
    }
    return ok;
} //delta == 1 블럭을 놓음, delta == -1 블럭을 치움

int cover(int** board) {
    int y = -1;
    int x = -1;
    for(int i = 0; i < H; i++) {
        for(int j = 0; j < W; j++) {
            if (board[i][j] == 0) {
                y = i;
                x = j;
                break;
            }
        }
        if(y != -1) break;
    }
    
    if(y == -1) return 1;
    int ret = 0;
    for(int type = 0; type < 4; type++) {
        if(set(board, y, x, type, 1)) ret += cover(board); //놓을 수 있으면 놓고
        set(board, y, x, type, -1); //놓을수 없으면 빼기
    }
    return ret;
}


int main() {
    cin >> H >> W;
    int** board = new int*[H];
    for(int i = 0; i < H; i++) {
        board[i] = new int[W];
    }
    
    char input;
    for(int i = 0; i < H; i++) {
        for(int j = 0; j < W; j++) {
            cin >> input;
            if(input == '#') board[i][j] = 1;
            else if(input == '.') board[i][j] = 0;
        }
    }
    cout << endl;
    
    for(int i = 0; i < H; i++) {
        for(int j = 0; j < W; j++) {
            cout << board[i][j];
        }
        cout << endl;
    }
    cout << endl;
    
    cout << cover(board) << endl;
    
    for(int i = 0; i < W; i++) {
        delete[] board[i];
    }
    delete[] board;
}
