#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#define INF 987654321
using namespace std;

int n;
int dist[10][10];

int shortestPath(vector<int>& path, vector<bool>& visited, int currentLenth) {
    cout << "path: ";
    for(int i = 0; i < path.size(); i++) {
        cout << path[i] << ' ';
    } cout << endl;
    cout << "lenth: " << currentLenth << endl;
    cout << endl;
        
    if(path.size() == n) return currentLenth + dist[path[0]][path.back()];
    
    int ret = INF;
    
    for(int next = 0; next < n; ++next) {
        if(visited[next]) continue;
        
        int here = path.back();
        path.push_back(next);
        visited[next] = true;
        
        
        int candidate = shortestPath(path, visited, currentLenth + dist[here][next]);
        
        ret = min(ret, candidate);
        visited[next] = false;
        path.pop_back();
    }
    
    return ret;
}

int main() {
    srand((unsigned int)time(NULL));
    
    cin >> n;
    for(int i = 0; i < n; i++) {
        for(int j = i + 1; j < n; j++) {
            dist[i][j] = (rand() % 9) + 1;
            dist[j][i] = dist[i][j];
        }
    }
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            if (dist[i][j] == 0) cout << "  ";
            else cout << dist[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
    
    vector<int> path;
    vector<bool> visited(n);
    path.push_back(0);
    visited[0] = true;
    
    cout << shortestPath(path, visited, 0) << endl;
}
